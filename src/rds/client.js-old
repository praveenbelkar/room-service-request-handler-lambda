const pg = require('pg');
const config = require('../../config');
const { logger } = require('api-node-modules');

const withRetry = (maxRetries, delayMs) => async (asyncFunc) => {
  let attempts = 0;

  return new Promise((resolve, reject) => {
    const intervalId = setInterval(async () => {
      try {
        const result = await asyncFunc();
        clearInterval(intervalId);
        resolve(result);
      } catch (err) {
        logger.info(
          `Retrying database connection. Attempt ${attempts} of ${maxRetries}...`
        );
        attempts++;
        if (attempts > maxRetries) {
          logger.info(`Max retries reached. Giving up.`);
          clearInterval(intervalId);
          reject(err);
        }
      }
    }, delayMs);
  });
};

const withDbConnectRetry = withRetry(
  config.DB_CONNECTION_MAX_RETRY,
  config.DB_CONNECTION_RETRY_INTERVAL
);

const makeClient = () =>
  new pg.Client({
    host: config.DB_HOST,
    port: config.DB_PORT,
    database: config.DB_NAME,
    user: config.DB_USER,
    password: config.DB_PASSWORD,
    ssl: false
  });

const connect = async () => {
  logger.info(
    `Connecting to database [${config.DB_NAME}] on port [${config.DB_PORT}] with user [${config.DB_USER}]...`
  );
  return await withDbConnectRetry(async () => {
    const client = makeClient();
    await client.connect();
    return client;
  });
};

const query = async (query) => {
  const client = await connect();
  try {
    return (await client.query(query)).rows;
  } finally {
    await client.end();
  }
};

module.exports = { connect, query, withRetry };
